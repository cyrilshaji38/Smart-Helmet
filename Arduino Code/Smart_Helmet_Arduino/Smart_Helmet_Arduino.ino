#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <Fonts/FreeMonoOblique9pt7b.h>
#include <SPI.h>
#include <Wire.h>  
#include <SoftwareSerial.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64
SoftwareSerial Bluetooth(2,3);      // (TXD, RXD) of HC-05
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
char BT_input;
int x=32,y;
const unsigned char PROGMEM left [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
0x00, 0x0E, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x00,
0x03, 0x82, 0x00, 0x00, 0x06, 0x03, 0xF0, 0x00, 0x07, 0x03, 0xFE, 0x00, 0x01, 0x82, 0x03, 0x80,
0x00, 0xE2, 0x00, 0xC0, 0x00, 0x32, 0x00, 0x40, 0x00, 0x1E, 0x00, 0x60, 0x00, 0x06, 0x00, 0x20,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char PROGMEM uturn [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x03, 0xBC, 0x00,
0x00, 0x0C, 0x06, 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x30, 0x00, 0x80,
0x00, 0x20, 0x00, 0x80, 0x00, 0x20, 0x00, 0x80, 0x00, 0x20, 0x00, 0x80, 0x00, 0x20, 0x00, 0x80,
0x00, 0x20, 0x00, 0x80, 0x00, 0x20, 0x00, 0x80, 0x00, 0x20, 0x0C, 0x98, 0x00, 0x20, 0x0F, 0xF8,
0x00, 0x20, 0x04, 0x08, 0x00, 0x20, 0x04, 0x10, 0x00, 0x20, 0x02, 0x30, 0x00, 0x20, 0x02, 0x20,
0x00, 0x20, 0x01, 0x60, 0x00, 0x20, 0x01, 0x40, 0x00, 0x20, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char PROGMEM right [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x43, 0x00,
0x00, 0x00, 0x41, 0xC0, 0x00, 0x0F, 0xC0, 0x60, 0x00, 0x7F, 0xC0, 0xE0, 0x01, 0xC0, 0x41, 0x80,
0x03, 0x00, 0x47, 0x00, 0x02, 0x00, 0x4C, 0x00, 0x06, 0x00, 0x78, 0x00, 0x04, 0x00, 0x60, 0x00,
0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char PROGMEM straight [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x02, 0x40, 0x00,
0x00, 0x06, 0x60, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x18, 0x18, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x01, 0x80, 0x00,
0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00,
0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00,
0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00,
0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00,
0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char PROGMEM reached [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x1F, 0xF8, 0x00,
0x00, 0x7F, 0xFE, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x01, 0xF8, 0x1F, 0x80,
0x03, 0xE0, 0x07, 0xC0, 0x03, 0xE0, 0x07, 0xC0, 0x07, 0xC0, 0x13, 0xE0, 0x07, 0xC0, 0x33, 0xE0,
0x07, 0x80, 0x61, 0xE0, 0x07, 0x8C, 0xC1, 0xE0, 0x07, 0x8F, 0x81, 0xE0, 0x07, 0xC7, 0x03, 0xE0,
0x07, 0xC2, 0x03, 0xE0, 0x03, 0xE0, 0x07, 0xC0, 0x03, 0xF0, 0x0F, 0xC0, 0x01, 0xF8, 0x1F, 0x80,
0x01, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x7F, 0xFE, 0x00,
0x00, 0x3F, 0xFC, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x07, 0xE0, 0x00,
0x00, 0x03, 0xC0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char PROGMEM loading [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x30, 0x0C, 0x00,
0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00,
0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x2F, 0xF4, 0x00,
0x00, 0x3F, 0xFC, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x03, 0xC0, 0x00,
0x00, 0x03, 0xC0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x19, 0x98, 0x00, 0x00, 0x31, 0x8C, 0x00,
0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x21, 0x84, 0x00, 0x00, 0x2F, 0xF4, 0x00,
0x00, 0x2F, 0xF4, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x2F, 0xF4, 0x00, 0x00, 0x20, 0x04, 0x00,
0x00, 0x30, 0x0C, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() 
{
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay(); 
  display.display(); 
  Bluetooth.begin(9600);
  Serial.begin(9600);
}

void loop()  
{
  if (Bluetooth.available())
  { 
    BT_input=(Bluetooth.read());
    Serial.write(BT_input);
 
    if(BT_input == '/')
    {
     display.clearDisplay();
     x=32;
     y=0;
    }
    else if(BT_input == '^')
    {
      display.drawBitmap(0, 0, straight, 32, 32, WHITE);
      display.display();
    }
    else if(BT_input == '<')
    {
      display.drawBitmap(0, 0, left, 32, 32, WHITE);
      display.display();
     
    }
    else if(BT_input == '>')
    {
      display.drawBitmap(0, 0, right, 32, 32, WHITE);
      display.display();
    }
    else if(BT_input == '$')
    {
      display.drawBitmap(0, 0, uturn, 32, 32, WHITE);
      display.display();
    }
    else if(BT_input == '&')
    {
      display.drawBitmap(0, 0, reached, 32, 32, WHITE);
      display.display();
    }
    else if((BT_input == ')') || (BT_input == '('))
    {
      display.drawBitmap(0, 0, loading, 32, 32, WHITE);
      display.display();
    }
    else if((BT_input >= 97 && BT_input <= 122) || (BT_input >= 65 && BT_input <= 90) || (BT_input == ' ') || (BT_input == '-'))
    {
      display.setFont(NULL);
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(x,y);
      display.println(BT_input);
      display.display();
      if(x<120)
      x=x+8;   
      else
      {
      x=32;
      y=y+8;
      }
    }
    else
    {
      display.setFont(&FreeMonoOblique9pt7b);
      display.setTextSize(1);
      display.setTextColor(WHITE);
      if(BT_input == '!')
      {
       display.setCursor(62,10);
       display.println("i");
       display.display();
      }
      else if(BT_input == '@')
      {
       display.setCursor(72,10);
       display.println("n");
       display.display();
       x=50;
      }
      else if(isDigit(BT_input) || BT_input == '.' || BT_input == '%' || BT_input == '#')
      {
        if(BT_input == '%')
         BT_input = 'm';
        if(BT_input == '#')
         BT_input = 'k';
        display.setCursor(x,26);
        display.println(BT_input);
        display.display();
        if(x<128)
        x=x+10;   
        else
        x=0; 
      }
    }     
  }
}
